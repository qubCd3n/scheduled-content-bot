import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.database import get_db
from database.models import User, Post, Template
from services.deepseek_service import DeepseekService
from services.scheduler_service import SchedulerService
from config import Config

logger = logging.getLogger(__name__)
router = Router()

class PostCreationStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_edit_method = State()
    waiting_for_template_choice = State()
    waiting_for_custom_prompt = State()
    waiting_for_edit_confirmation = State()
    waiting_for_schedule_time = State()
    waiting_for_final_confirmation = State()

# Initialize handlers
user_handlers = None

def init_user_handlers(scheduler_service: SchedulerService):
    global user_handlers
    user_handlers = UserHandlers(scheduler_service)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é
    router.message(Command("start"))(user_handlers.start_command)
    router.message(Command("help"))(user_handlers.help_command)
    router.message(Command("cancel"))(user_handlers.cancel_command)
    router.message(Command("my_posts"))(user_handlers.my_posts_command)
    router.message(F.text)(user_handlers.handle_text_message)
    router.message(F.photo)(user_handlers.handle_photo_message)
    router.message(F.video)(user_handlers.handle_video_message)
    router.callback_query(F.data == "edit_template")(user_handlers.handle_template_choice)
    router.callback_query(F.data.startswith("template_"))(user_handlers.handle_template_selected)
    router.callback_query(F.data == "edit_custom")(user_handlers.handle_custom_prompt)
    router.callback_query(F.data == "edit_skip")(user_handlers.handle_skip_edit)
    router.callback_query(F.data == "confirm_edit")(user_handlers.handle_edit_confirmation)
    router.callback_query(F.data == "re_edit")(user_handlers.handle_re_edit)
    router.callback_query(F.data == "confirm_publish")(user_handlers.handle_publish_confirmation)
    router.callback_query(F.data == "cancel")(user_handlers.handle_cancel)
    return user_handlers

class UserHandlers:
    def __init__(self, scheduler_service: SchedulerService):
        self.scheduler_service = scheduler_service
        self.deepseek_service = DeepseekService()
        
    # –£–¥–∞–ª–µ–Ω—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã @router.message –∏ @router.callback_query
    async def start_command(self, message: Message):
        """Handle /start command"""
        try:
            if not message.from_user:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
                return
            db_gen = get_db()
            db = next(db_gen)
            try:
                # Create or get user
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                if not user:
                    user = User(
                        telegram_id=message.from_user.id,
                        username=message.from_user.username,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name
                    )
                    db.add(user)
                    db.commit()
                welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Scheduled Content Editor!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ–¥–∏–∞
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏/–∏–ª–∏ –º–µ–¥–∏–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/my_posts - –ú–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                """
                await message.answer(welcome_text)
            finally:
                db_gen.close()
        except Exception as e:
            logger.error(f"Error in start command: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    async def help_command(self, message: Message):
        """Handle /help command"""
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
   ‚Ä¢ –®–∞–±–ª–æ–Ω (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∏ –¥—Ä.)
   ‚Ä¢ –°–≤–æ–π –ø—Ä–æ–º–ø—Ç
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç

üïê –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
–ü—Ä–∏–º–µ—Ä: 15.07.2025 14:30

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/my_posts - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        await message.answer(help_text)
        
    async def cancel_command(self, message: Message, state: FSMContext):
        """Handle /cancel command"""
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")
        
    async def my_posts_command(self, message: Message):
        """Handle /my_posts command"""
        try:
            if not message.from_user:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
                return
            db_gen = get_db()
            db = next(db_gen)
            try:
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                if not user:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                scheduled_posts = self.scheduler_service.get_scheduled_posts(user.id)
                if not scheduled_posts:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
                    return
                posts_text = "üìã –í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
                for i, post in enumerate(scheduled_posts, 1):
                    text_preview = (post.edited_text or post.original_text)[:50] + "..."
                    scheduled_time = post.scheduled_time.strftime("%d.%m.%Y %H:%M")
                    posts_text += f"{i}. {text_preview}\n‚è∞ {scheduled_time}\n\n"
                await message.answer(posts_text)
            finally:
                db_gen.close()
        except Exception as e:
            logger.error(f"Error in my_posts command: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.")
            
    async def handle_text_message(self, message: Message, state: FSMContext):
        """Handle text messages"""
        current_state = await state.get_state()
        
        if current_state == PostCreationStates.waiting_for_content:
            # User sent initial content
            await self._handle_initial_content(message, state)
        elif current_state == PostCreationStates.waiting_for_custom_prompt:
            # User sent custom prompt
            await self._handle_custom_prompt(message, state)
        elif current_state == PostCreationStates.waiting_for_schedule_time:
            # User sent schedule time
            await self._handle_schedule_time(message, state)
        else:
            # Start new post creation
            await self._handle_initial_content(message, state)
            
    async def handle_photo_message(self, message: Message, state: FSMContext):
        """Handle photo messages"""
        current_state = await state.get_state()
        
        if current_state == PostCreationStates.waiting_for_content:
            await self._handle_initial_content(message, state)
        else:
            await self._handle_initial_content(message, state)
            
    async def handle_video_message(self, message: Message, state: FSMContext):
        """Handle video messages"""
        current_state = await state.get_state()
        
        if current_state == PostCreationStates.waiting_for_content:
            await self._handle_initial_content(message, state)
        else:
            await self._handle_initial_content(message, state)
            
    async def _handle_initial_content(self, message: Message, state: FSMContext):
        """Handle initial content from user"""
        try:
            # Extract text and media
            text = message.text or message.caption or ""
            media_files = []
            
            if message.photo:
                media_files.append({
                    'type': 'photo',
                    'file_id': message.photo[-1].file_id
                })
            elif message.video:
                media_files.append({
                    'type': 'video',
                    'file_id': message.video.file_id
                })
                
            # Store in state
            await state.update_data(
                original_text=text,
                media_files=media_files
            )
            
            # Ask for edit method
            await self._ask_for_edit_method(message, state)
            
        except Exception as e:
            logger.error(f"Error handling initial content: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    async def _ask_for_edit_method(self, message: Message, state: FSMContext):
        """Ask user to choose edit method"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="edit_template")
        builder.button(text="‚úèÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data="edit_custom")
        builder.button(text="‚è≠Ô∏è –ë–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="edit_skip")
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(PostCreationStates.waiting_for_edit_method)
        
    async def handle_template_choice(self, callback: CallbackQuery, state: FSMContext):
        """Handle template choice"""
        try:
            db_gen = get_db()
            db = next(db_gen)
            try:
                templates = db.query(Template).filter(Template.is_default == True).order_by(Template.id).limit(3).all()
                builder = InlineKeyboardBuilder()
                for template in templates:
                    builder.button(text=template.name, callback_data=f"template_{template.id}")
                builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
                if callback.message and hasattr(callback.message, "edit_text"):
                    await callback.message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=builder.as_markup()
                    )
                elif callback.message and hasattr(callback.message, "answer"):
                    await callback.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=builder.as_markup()
                    )
                else:
                    logger.error("callback.message is None or has no edit_text/answer method")
                await state.set_state(PostCreationStates.waiting_for_template_choice)
            finally:
                db_gen.close()
        except Exception as e:
            logger.error(f"Error in template choice: {str(e)}")
            if callback.message and hasattr(callback.message, "answer"):
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    async def handle_template_selected(self, callback: CallbackQuery, state: FSMContext):
        """Handle template selection"""
        try:
            if not callback.data or not isinstance(callback.data, str):
                if callback.message and hasattr(callback.message, "answer"):
                    await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞.")
                return
            parts = callback.data.split("_")
            if len(parts) < 2 or not parts[1].isdigit():
                if callback.message and hasattr(callback.message, "answer"):
                    await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞.")
                return
            template_id = int(parts[1])
            db_gen = get_db()
            db = next(db_gen)
            try:
                template = db.query(Template).filter(Template.id == template_id).first()
                
                if not template:
                    if callback.message and hasattr(callback.message, "answer"):
                        await callback.message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # Get original text
                data = await state.get_data()
                original_text = data.get('original_text', '')
                
                if not original_text:
                    if callback.message and hasattr(callback.message, "answer"):
                        await callback.message.answer("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # Edit text using Deepseek
                await callback.message.answer("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
                edited_text = await self.deepseek_service.edit_text(original_text, template.prompt)
                
                if edited_text:
                    await state.update_data(
                        edited_text=edited_text,
                        template_used=template.name,
                        custom_prompt=None
                    )
                    await self._show_edit_preview(callback.message, original_text, edited_text, state)
                else:
                    if callback.message and hasattr(callback.message, "answer"):
                        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç.")
            finally:
                db_gen.close()
        except Exception as e:
            logger.error(f"Error in template selection: {str(e)}")
            if callback.message and hasattr(callback.message, "answer"):
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
            
    async def handle_custom_prompt(self, callback: CallbackQuery, state: FSMContext):
        """Handle custom prompt request"""
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ"
        )
        await state.set_state(PostCreationStates.waiting_for_custom_prompt)
        
    async def _handle_custom_prompt(self, message: Message, state: FSMContext):
        """Handle custom prompt from user"""
        try:
            custom_prompt = message.text.strip()
            data = await state.get_data()
            original_text = data.get('original_text', '')
            
            if not original_text:
                await message.answer("–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # Edit text using Deepseek
            await message.answer("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
            edited_text = await self.deepseek_service.edit_text(original_text, custom_prompt)
            
            if edited_text:
                await state.update_data(
                    edited_text=edited_text,
                    template_used=None,
                    custom_prompt=custom_prompt
                )
                await self._show_edit_preview(message, original_text, edited_text, state)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç.")
                
        except Exception as e:
            logger.error(f"Error in custom prompt: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
            
    async def handle_skip_edit(self, callback: CallbackQuery, state: FSMContext):
        """Handle skip edit option"""
        data = await state.get_data()
        original_text = data.get('original_text', '')
        
        await state.update_data(
            edited_text=None,
            template_used=None,
            custom_prompt=None
        )
        
        await self._show_edit_preview(callback.message, original_text, original_text, state)
        
    async def _show_edit_preview(self, message, original_text: str, edited_text: str, state: FSMContext):
        """Show edit preview to user"""
        preview_text = f"""
üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:

üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
{original_text}

‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:
{edited_text}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
        """
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_edit")
        builder.button(text="üîÑ –ü–µ—Ä–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="re_edit")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        
        await message.answer(preview_text, reply_markup=builder.as_markup())
        await state.set_state(PostCreationStates.waiting_for_edit_confirmation)
        
    async def handle_edit_confirmation(self, callback: CallbackQuery, state: FSMContext):
        """Handle edit confirmation"""
        await callback.message.edit_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (UTC)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 14:30"
        )
        await state.set_state(PostCreationStates.waiting_for_schedule_time)
        
    async def handle_re_edit(self, callback: CallbackQuery, state: FSMContext):
        """Handle re-edit request"""
        await self._ask_for_edit_method(callback.message, state)
        
    async def _handle_schedule_time(self, message: Message, state: FSMContext):
        """Handle schedule time input"""
        from datetime import datetime, time, timedelta
        try:
            time_str = message.text.strip()
            # Parse time only
            try:
                user_time = datetime.strptime(time_str, "%H:%M").time()
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
                )
                return
            now_utc = datetime.utcnow()
            today = now_utc.date()
            scheduled_datetime = datetime.combine(today, user_time)
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
            if scheduled_datetime <= now_utc:
                await state.update_data(scheduled_time=now_utc)
                await message.answer("‚è∞ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            else:
                await state.update_data(scheduled_time=scheduled_datetime)
            await self._show_final_preview(message, state)
        except Exception as e:
            logger.error(f"Error handling schedule time: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")
            
    async def _show_final_preview(self, message: Message, state: FSMContext):
        """Show final post preview"""
        try:
            data = await state.get_data()
            text_to_publish = data.get('edited_text') or data.get('original_text', '')
            media_count = len(data.get('media_files', []))
            scheduled_time = data.get('scheduled_time')
            preview_time = scheduled_time.strftime("%d.%m.%Y %H:%M") if scheduled_time else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            preview_text = f"""
üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:

üìù –¢–µ–∫—Å—Ç:
{text_to_publish}

üìé –ú–µ–¥–∏–∞: {media_count} —Ñ–∞–π–ª(–æ–≤)
‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (UTC): {preview_time}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:
            """
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            await message.answer(preview_text, reply_markup=builder.as_markup())
            await state.set_state(PostCreationStates.waiting_for_final_confirmation)
        except Exception as e:
            logger.error(f"Error showing final preview: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            
    async def handle_publish_confirmation(self, callback: CallbackQuery, state: FSMContext):
        """Handle publish confirmation"""
        try:
            data = await state.get_data()
            db_gen = get_db()
            db = next(db_gen)
            try:
                # Get or create user
                if not callback.from_user:
                    if callback.message and hasattr(callback.message, "answer"):
                        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
                    return
                user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
                if not user:
                    await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # Create post
                post = Post(
                    user_id=user.id,
                    original_text=data.get('original_text', ''),
                    edited_text=data.get('edited_text'),
                    template_used=data.get('template_used'),
                    custom_prompt=data.get('custom_prompt'),
                    media_files=data.get('media_files', []),
                    scheduled_time=data.get('scheduled_time'),
                    target_channel=Config.TARGET_CHANNEL_ID,
                    status='scheduled'
                )
                
                db.add(post)
                db.commit()
                
                # Schedule post
                self.scheduler_service.schedule_post(post)
                
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {data.get('scheduled_time').strftime('%d.%m.%Y %H:%M')}!\n\n"
                    f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
                )
                
                await state.clear()
            finally:
                db_gen.close()
        except Exception as e:
            logger.error(f"Error confirming publish: {str(e)}")
            if callback.message and hasattr(callback.message, "answer"):
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
            
    async def handle_cancel(self, callback: CallbackQuery, state: FSMContext):
        """Handle cancel action"""
        await state.clear()
        await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.") 